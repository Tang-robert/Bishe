# Functions used in the analysis

#
# seurat object - steps to PCA
#

# standardized method for processing the samples to obtain the PCA reduction
seurat_to_pca <- function(object){
  print('NORMALIZATION')
  object <- NormalizeData(object, normalization.method = "LogNormalize")
  print('VARIABLE FEATURES')
  object <- FindVariableFeatures(object, nfeatures = 2000)
  print('SCALE DATA')
  object <- ScaleData(object)
  print('RUN PCA')
  object <- RunPCA(object, npcs = 100, ndims.print = 1, nfeatures.print = 5)
  return(object)
}


#
# Get the resolutions
#
# This function tests different resolutions, saves the markers as csv files
# and generates a cluster tree with the different resolutions tested.

resolutions <- function(object,
                        resolutions = c(0.1,0.3,0.5,0.7,0.9,1.1,1.3,1.5), 
                        workingdir,
                        title = object$orig.ident[1],
                        res = 300,
                        width = 25,
                        height = 20){
  require(clustree)
  require(Seurat)
  if(!('Seurat' %in% is(object))){stop('object is not Seurat')}
  oldworkingdir <- getwd()
  setwd(workingdir)
  for(i in 1:length(resolutions)){
    object <- FindClusters(object, resolution = resolutions[i])
    
    markers <- FindAllMarkers(object = object,
                              only.pos = TRUE,
                              min.pct = 0.25, 
                              thresh.use = 0.25)
    
    write.table(x = markers, file = paste0(title,'_markers_resolution_',resolutions[i],'.csv'),
                row.names = F, sep = ';', dec= ',', col.names = T)
    
    png(filename = paste0(title,'_resolution_',resolutions[i],'.png'),
        res = res, width = width, height = height, units = 'cm')
    p <- DimPlot(object, label = T) +
      theme(legend.position = 'right') + labs(title = title)
    print(p)
    dev.off()
  }
  
  png(filename = paste0(title,'_clustree_resolutions.png'),
      res = res, width = width+5, height = height+5, units = 'cm')
  p <- clustree(object, prefix = 'RNA_snn_res.') + labs(subtitle = title )
  print(p)
  dev.off()
  
  setwd(oldworkingdir)
  
  rm(markers, oldworkingdir, p)
  return(object)
}

#
# Custom violin plot and ridge plot functions
#
# designed for seurat objects.

violin_plot <- function(object, features,
                        split.by = NULL, 
                        idents = NULL,
                        colors=NULL,
                        group.by=NULL) {
  require(ggplot2)
  require(Seurat)
  require(patchwork)
  require(formulaic)
  require(gplots)
  require(randomcoloR)
  require(scales)
  require(ggridges)
  require(cowplot)
  
  if(is.null(colors)){nucolor <- T}else{nucolor <- F}
  
  if (sum(features %in% rownames(object)) != length(features)){
    print(paste('Feature(s)', features[!(features %in% rownames(object))], 'not present in the object'))
    features <- features[features %in% rownames(object)]
  }
  
  if(!is.null(idents)){
    if (!is.null(x = group.by)) {
      object <- SetIdent(object, value = group.by)
      object <- subset(object, idents = idents)
    }else{
      object <- subset(object, idents = idents)
    }
  }
  
  #
  # select cells
  #
  if (is.null(x = idents)) {
    cells <- colnames(x = object)
  } else {
    cells <- names(x = Idents(object = object)[Idents(object = object) %in% idents])
  }
  
  idents <- if (is.null(x = group.by)) {
    Idents(object = object)[cells]
  } else {
    object[[group.by, drop = TRUE]][cells]
  }
  if (!is.factor(x = idents)) {
    idents <- droplevels(factor(x = idents))
  }
  
  idents <- droplevels(factor(x = idents, levels = levels(idents)[order(levels(idents))]))
  # print(idents)
  if (is.null(x = colors)) {
    colors <- scales::hue_pal()(length(x = levels(x = idents)))
    # colors <- alpha(colors, alpha = 0.5)
  } else {
    if(length(colors) == 1) {
      colors <- rep(colors, length(levels(idents)))
    }
    if(length(colors) < length(levels(idents))){
      ll <- length(levels(idents)) - length(colors)
      colors <- c(colors, randomcoloR::randomColor(count = ll))
    }
  }
  
  y <- 'ident'
  xlab <- 'Expression Level'
  ylab <- 'Identity'
  
  data <- FetchData(object, vars = c(features, split.by, group.by),
                    cells = cells, slot = 'data')
  
  data[,group.by] <- factor( data[,group.by] , levels = levels(idents))
  if(is.null(group.by)){
    data <- cbind(data, object@active.ident)
    group.by <- 'object@active.ident'
  }
  if(is.null(split.by)){
    if(length(features) == 1){
      plot <- ggplot(data, aes_string(y=add.backtick(features), 
                                      x=group.by,
                                      fill = group.by)) + 
        geom_violin() +
        theme_classic() +
        theme(axis.text.x = element_text(angle=90, vjust = 0.5),
              axis.title.x = element_blank())
    }else{
      plot <- NULL
      list_plot <- vector(mode = "list", length = length(features))
      names(list_plot) <- features
      for(feature in features){
        if(feature != features[length(features)]){
          a <- ggplot(data, aes_string(y=add.backtick(feature), 
                                       x=group.by,
                                       fill = group.by))  + 
            geom_violin() +
            theme_classic() +
            theme(axis.text.x = element_blank(),
                  axis.title.x = element_blank())
          list_plot[[feature]] <- a}
        else{
          a <- ggplot(data, aes_string(y=add.backtick(feature), 
                                       x=group.by,
                                       fill = group.by))  + 
            geom_violin() +
            theme_classic() +
            theme(axis.text.x = element_text(angle=90, vjust = 0.5),
                  axis.title.x = element_blank())
          list_plot[[feature]] <- a
          
        }
      }
      plot <- wrap_plots(list_plot, nrow = length(features),
                         guides = 'collect')
    }
    
  }
  #
  # split by!
  #
  if(!is.null(split.by)){
    if(length(split.by) == 1){
      #
      # ONE SPLIT.BY
      #
      colnames(data)[colnames(data) %in% split.by] <- make.unique(rep('split.by', length(split.by)))
      if(length(features) == 1){
        plot <- ggplot(data, aes_string(y=add.backtick(features), 
                                        x=group.by, fill = group.by)) + 
          geom_violin() +
          theme_classic() +
          theme(axis.text.x = element_text(angle=90, vjust = 0.5),
                axis.title.x = element_blank())+
          facet_grid(cols = vars(split.by), scales = 'free')
      }
      if(length(features) > 1){
        plot <- NULL
        list_plot <- vector(mode = "list", length = length(features))
        names(list_plot) <- features
        for(feature in features){
          if(feature == features[1]){
            a <-ggplot(data, aes_string(y=add.backtick(feature), 
                                        x=group.by,
                                        fill = group.by)) + 
              geom_violin() +
              theme_classic() +
              facet_grid(cols = vars(split.by), scales = 'free') +
              theme(axis.text.x = element_blank(),
                    axis.title.x = element_blank())
            
            list_plot[[feature]] <- a
          }
          if(feature != features[length(features)] &
             feature != features[1]){
            a <-ggplot(data, aes_string(y=add.backtick(feature), 
                                        x=group.by,
                                        fill = group.by)) + 
              geom_violin() +
              theme_classic() +
              facet_grid(cols = vars(split.by), scales = 'free')+
              theme(axis.text.x = element_blank(),
                    axis.title.x = element_blank(),
                    strip.background = element_blank(),
                    strip.text = element_blank()
              )
            
            list_plot[[feature]] <- a
            
          }
          if(feature == features[length(features)]){
            a <-ggplot(data, aes_string(y=add.backtick(feature), 
                                        x=group.by,
                                        fill = group.by)) + 
              geom_violin() +
              theme_classic() +
              facet_grid(cols = vars(split.by), scales = 'free')+
              theme(axis.text.x = element_text(angle=90, 
                                               vjust = 0.5),
                    axis.title.x = element_blank(),
                    strip.background = element_blank(),
                    strip.text = element_blank()
              )
            list_plot[[feature]] <- a
          }
        }
        plot <- wrap_plots(list_plot, nrow = length(features),
                           guides = 'collect')
      }
    }
    if(length(split.by) > 1){
      #
      # MULTIPLE SPLIT.BY
      #
      colnames(data)[colnames(data) %in% split.by] <- make.unique(rep('split.by', length(split.by)))
      if(length(features) == 1){
        plot <- ggplot(data, aes_string(y=add.backtick(features), 
                                        x=group.by, fill = group.by)) + 
          geom_violin() +
          theme_classic() +
          theme(axis.text.x = element_text(angle=90, vjust = 0.5),
                axis.title.x = element_blank())+
          facet_grid(cols = vars(split.by),
                     rows = vars(split.by.1),
                     scales = 'free')
      }
      if(length(features) > 1){
        plot <- NULL
        list_plot <- vector(mode = "list", length = length(features))
        names(list_plot) <- features
        for(feature in features){
          if(feature == features[1]){
            a <-ggplot(data, aes_string(y=add.backtick(feature), 
                                        x=group.by,
                                        fill = group.by)) + 
              geom_violin() +
              theme_classic() +
              facet_grid(cols = vars(split.by),
                         rows = vars(split.by.1),
                         scales = 'free')+
              theme(axis.text.x = element_blank(),
                    axis.title.x = element_blank())
            
            list_plot[[feature]] <- a
          }
          if(feature != features[length(features)] &
             feature != features[1]){
            a <-ggplot(data, aes_string(y=add.backtick(feature), 
                                        x=group.by,
                                        fill = group.by)) + 
              geom_violin() +
              theme_classic() +
              facet_grid(cols = vars(split.by),
                         rows = vars(split.by.1),
                         scales = 'free')+
              theme(axis.text.x = element_blank(),
                    axis.title.x = element_blank(),
                    strip.background.x = element_blank(),
                    strip.text.x = element_blank()
              )
            
            list_plot[[feature]] <- a
            
          }
          if(feature == features[length(features)]){
            a <-ggplot(data, aes_string(y=add.backtick(feature), 
                                        x=group.by,
                                        fill = group.by)) + 
              geom_violin() +
              theme_classic() +
              facet_grid(cols = vars(split.by),
                         rows = vars(split.by.1),
                         scales = 'free')+
              theme(axis.text.x = element_text(angle=90, 
                                               vjust = 0.5),
                    axis.title.x = element_blank(),
                    strip.background.x = element_blank(),
                    strip.text.x = element_blank()
              )
            list_plot[[feature]] <- a
          }
        }
        plot <- wrap_plots(list_plot, nrow = length(features),
                           guides = 'collect')
      }
    }
    
  }
  
  if(!isTRUE(nucolor)){plot <- plot & scale_fill_manual(values = colors)}
  
  if(group.by == 'object@active.ident'){
    names(colors) <- NULL
    plot <- plot+
      scale_fill_manual(values = colors) + 
      labs(y = 'Idents')+
      NoLegend()
  }
  return(plot)
  
}


ridge_plot <- function(object, features,
                       split.by = NULL, 
                       idents = NULL,
                       colors=NULL,
                       group.by=NULL) {
  require(ggplot2)
  require(Seurat)
  require(patchwork)
  require(formulaic)
  require(gplots)
  require(scales)
  require(ggridges)
  require(cowplot)
  require(randomcoloR)
  
  if (sum(features %in% rownames(object)) != length(features)){
    print(paste('Feature(s)', features[!(features %in% rownames(object))], 'not present in the object'))
    
  }
  if (length(features) > 1){
    stop('Only one gene please!')
  }
  if(!is.null(idents)){
    if (!is.null(x = group.by)) {
      object <- SetIdent(object, value = group.by)
      object <- subset(object, idents = idents)
    }else{
      object <- subset(object, idents = idents)
    }
  }
  
  if (is.null(x = idents)) {
    cells <- colnames(x = object)
  } else {
    cells <- names(x = Idents(object = object)[Idents(object = object) %in% idents])
  }
  
  
  idents <- if (is.null(x = group.by)) {
    Idents(object = object)[cells]
  } else {
    object[[group.by, drop = TRUE]][cells]
  }
  if (!is.factor(x = idents)) {
    idents <- factor(x = idents)
  }
  idents <- factor(x = idents, levels = levels(idents)[order(levels(idents))])
  if (is.null(x = split.by)) {
    split <- NULL
  } else {
    split <- object[[split.by, drop = TRUE]][cells]
  }
  if (!is.factor(x = split)) {
    split <- factor(x = split)
  }
  if (is.null(x = colors)) {
    colors <- hue_pal()(length(x = levels(x = idents)))
    colors <- alpha(colors, alpha = 0.5)
  } 
  if (length(x = colors) < length(x = levels(x = idents))) {
    ll <- length(levels(idents)) - length(colors)
    colors <- c(colors, randomcoloR::randomColor(count = ll))
  }
  if (length(x = colors) < length(x = levels(x = split))) {
    ll <- length(levels(split)) - length(colors)
    colors <- c(colors, randomcoloR::randomColor(count = ll))
  }
  if(length(split)>0){
    colors <- rep_len(x = colors, length.out = length(x = levels(x = split)))
    names(x = colors) <- levels(x = split)
  }
  if(length(split)==0){
    names(x = colors) <- levels(idents)
  }
  
  y <- 'ident'
  xlab <- 'Expression Level'
  ylab <- 'Identity'
  
  if(sum(features %in% rownames(object)) == length(features)){
    data <- FetchData(object, vars = c(features, split.by, group.by),
                      cells = cells, slot = 'data')
    data[,group.by] <- factor( data[,group.by] , levels = levels(idents))
    if(is.null(group.by)){
      data <- cbind(data, object@active.ident)
      group.by <- 'object@active.ident'
    }
    if(is.null(split.by)){
      plot <- ggplot(data, aes_string(x=features, 
                                      y=group.by,
                                      fill = group.by)) +
        geom_density_ridges()+
        theme_cowplot() +
        labs(title = features)+ 
        scale_fill_manual(values = colors, labels = names(colors))
    }
    if(!is.null(split.by)){
      plot <- ggplot(data, aes_string(x=features, 
                                      y=group.by, fill = split.by)) +
        geom_density_ridges()+
        theme_cowplot() +
        labs(title = features)  + 
        scale_fill_manual(values = colors, labels = names(colors))
    }
  }
  if(group.by == 'object@active.ident'){
    names(colors) <- NULL
    plot <- plot+
      scale_fill_manual(values = colors) + 
      labs(y = 'Idents')
    if(is.null(split.by)){
      plot <- plot + NoLegend()
    }
  }
  
  return(plot)
  
}


#
# Barplot figure
#

barplot_figure <- function(object, features, group.by,
                           idents= NULL, cols = NULL){
  require(Seurat)
  require(gridExtra)
  require(ggpubr)
  require(formulaic)
  
  if(is.null(cols)){nucolor <- T}else{nucolor <- F}
  
  if (sum(features %in% rownames(object)) != length(features)){
    print(paste('Feature(s)', features[!(features %in% rownames(object))], 'not present in the object'))
    features <- features[features %in% rownames(object)]
  }
  
  #
  # select cells
  #
  if (is.null(x = idents)) {
    cells <- colnames(x = object)
  } else {
    cells <- names(x = Idents(object = object)[Idents(object = object) %in% idents])
  }
  
  idents <- if (is.null(x = group.by)) {
    Idents(object = object)[cells]
  } else {
    object[[group.by, drop = TRUE]][cells]
  }
  if (!is.factor(x = idents)) {
    idents <- droplevels(factor(x = idents))
  }
  
  idents <- droplevels(factor(x = idents, levels = levels(idents)[order(levels(idents))]))
  # print(idents)
  
  data <- FetchData(object, vars = c(features, group.by))
  colnames(data)[ncol(data)] <- 'class'
  data <- data[order(data$class),]
  data$cells <- rownames(data)
  data$cells <- factor(data[,ncol(data)], levels =data[,ncol(data)])
  head(data)
  plot_list <- list()
  if(is.null(cols)){
    for(i in 1:length(features)){
      p = ggplot(data, aes_string(x='cells',
                                  y=add.backtick(features[i], 
                                                 include.backtick = 'all'), 
                                  fill = 'class', color = 'class')) + 
        geom_bar(stat = "identity") +
        labs(x = '')+
        theme_classic() +
        scale_y_continuous(
          labels = scales::number_format(accuracy = 0.1))+
        theme(axis.text.x = element_blank(),
              axis.title.x = element_blank(),
              axis.ticks.x = element_blank(),
              legend.position = 'none') 
      plot_list[[i]] = p
    }
    j <- ggplot(data, aes_string(x='cells', 
                                 y=add.backtick(features[i], 
                                                include.backtick = 'all'), 
                                 fill = 'class', color = 'class')) +
      geom_bar(stat = "identity") +
      theme_classic() +
      theme(legend.position = 'bottom') 
    p = get_legend(j)
    
    plot_list[[i+1]] = p
  }else{
    for(i in 1:length(features)){
      p = ggplot(data, aes_string(x='cells',
                                  y=add.backtick(features[i],
                                                 include.backtick = 'all'),
                                  fill = 'class', color = 'class')) + 
        geom_bar(stat = "identity") +
        labs(x = '')+
        theme_classic() +
        scale_color_manual(values = cols)+
        scale_y_continuous(
          labels = scales::number_format(accuracy = 0.1))+
        scale_fill_manual(values = cols)+
        theme(axis.text.x = element_blank(),
              axis.title.x = element_blank(),
              axis.ticks.x = element_blank(),
              legend.position = 'none') 
      plot_list[[i]] = p
    }
    j <- ggplot(data, aes_string(x='cells',
                                 y=add.backtick(features[i],
                                                include.backtick = 'all'), 
                                 fill = 'class', color = 'class')) +
      geom_bar(stat = "identity") +
      theme_classic() +
      scale_color_manual(values = cols)+
      scale_fill_manual(values = cols)+
      theme(legend.position = 'bottom') 
    p = get_legend(j)
    
    plot_list[[i+1]] = p
  }
  
  return(do.call("ggarrange", c(plot_list, ncol=1)))
}



select_pcs_arti <- function(seurat_obj, threshold) {
  stdev <- Stdev(seurat_obj, reduction = "pca")
  count <- sum(stdev >= threshold)
  return(count)
}


select_pcs_auto <- function(seurat_obj) {
    stdev <- Stdev(seurat_obj, reduction = "pca")
    fit <- loess(stdev ~ seq_along(stdev))
    predicted_values <- predict(fit)
    slopes <- diff(predicted_values)
    slope_changes <- diff(slopes)
    max_change_index <- which.max(abs(slope_changes)) + 1
    max_change_point_value <- predicted_values[max_change_index]
    next_point_value <- predicted_values[max_change_index + 1]
    prev_rounded <- next_point_value
    for (digits in 5:1) {
        rounded_temp <- round(next_point_value, digits)
        if (rounded_temp > max_change_point_value) {
            break
        }
        prev_rounded = rounded_temp
    }
    rounded_value <- prev_rounded
    return(c(rounded_value, max_change_index))
}   


barplot_proportion <- function(seurat_obj, group.by = "group", celltype = "celltype", 
                               color = NULL, plot_title = "Cell Type Proportion by Group",
                               xlab = "Group", ylab = "Cell Frequency (%)", 
                               legend_title = "Cell Type", angle_x_text = 45,
                               axis_title_size = 14, axis_text_size = 12,
                               axis_line_size = 0.5, y_len = 0.55, x_len = 0.05,
                               group_order = NULL,
                               flip_axis = FALSE) {  # 新增参数 flip_axis
  
  # 加载必要的包
  library(Seurat)
  library(ggplot2)
  
  # 提取分组和细胞类型信息
  group <- seurat_obj[[group.by]]
  celltype <- seurat_obj[[celltype]]
  
  # 创建数据框
  data <- data.frame(group, celltype)
  colnames(data) <- c("Group", "CellType")
  
  # 如果指定了分组顺序，对 Group 列进行排序
  if (!is.null(group_order)) {
    data$Group <- factor(data$Group, levels = group_order)
  }
  
  # 计算每个小组中每种细胞类型的数量
  counts <- table(data$Group, data$CellType)
  
  # 计算每种细胞类型在每个小组中的比例
  proportions <- prop.table(counts, margin = 1) * 100
  
  # 将比例数据转换为长格式
  proportions_long <- as.data.frame.table(proportions)
  colnames(proportions_long) <- c("Group", "CellType", "Frequency")
  
  # 创建基础绘图对象
  p <- ggplot(proportions_long, aes(x = Group, y = Frequency, fill = CellType)) +
    geom_col(position = "stack") +
    scale_y_continuous(labels = function(x) paste0(x, "%"), expand = expansion(mult = c(x_len, x_len))) +
    scale_x_discrete(expand = expansion(add = c(y_len,y_len))) +
    labs(title = plot_title, x = xlab, y = ylab, fill = legend_title) +
    theme_minimal() +
    theme(
      axis.text.x = element_text(angle = angle_x_text, hjust = 1, size = axis_text_size),
      axis.text.y = element_text(size = axis_text_size),
      axis.title.x = element_text(size = axis_title_size),
      axis.title.y = element_text(size = axis_title_size),
      axis.line.x = element_line(color = "black", size = axis_line_size),
      axis.line.y = element_line(color = "black", size = axis_line_size),
      plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm"),
      panel.border = element_blank(),
      axis.ticks = element_line(color = "black", size = axis_line_size)
    ) +
    coord_cartesian(clip = "off")
  
  # 如果指定了颜色，则设置填充颜色
  if (!is.null(color)) {
    unique_celltypes <- unique(proportions_long$CellType)
    if (length(color) != length(unique_celltypes)) {
      warning("The length of the color vector does not match the number of unique cell types. Using default colors.")
    } else {
      names(color) <- unique_celltypes
      p <- p + scale_fill_manual(values = color)
    }
  }
  
  # 根据 flip_axis 参数决定是否翻转坐标轴
  if (flip_axis) {
    p <- p + coord_flip()
  }
  
  return(p)
}




circle_umaplot <- function(seurat_obj, 
                                    celltype_pre, #预分类
                                    celltype_fin, #最终分类
                                    cho_clus = NULL, #字符向量，选择画圈聚类
                                    linewidth = 0.5, #线条粗细
                                    smoothSigma = 0.05, #平滑度
                                    linetype = "dashed", #虚线实线
                                    minDensity = 1, #松紧度
                                    color = NULL,
                                    group.by = "group", #柱状图分组
                                    plot_title = "Cell Type Proportion by Group",
                                    xlab = "Group", ylab = "Cell Frequency (%)", 
                                    legend_title = "Cell Type", angle_x_text = 45,
                                    axis_title_size = 14, axis_text_size = 12,
                                    axis_line_size = 0.5, y_len = 0.55, x_len = 0.05) {
  
  # 加载所需的包
  library(mascarade)
  library(tidyverse)
  library(Seurat)
  library(data.table)
  library(ggplot2)
  library(patchwork)
  
  
  # 绘制 UMAP 图部分
  df <- FetchData(object = seurat_obj, vars = c("umap_1", "umap_2", "RNA_snn_res.0.1", celltype_pre, celltype_fin))
  
  if (is.null(cho_clus)) {
    cho_clus <- unique(df[[celltype_pre]])
  }
  
  maskTable <- generateMask(dims = df[, 1:2], cluster = df[[celltype_pre]], minDensity = minDensity, smoothSigma = smoothSigma)
  
  maskTable_filtered <- maskTable[maskTable$cluster %in% cho_clus, ]
  
  if (!is.null(color)) {
    if (length(color) != length(cho_clus)) {
      stop(paste("指定的颜色数量（", length(color), "）必须与指定的聚类数量（", length(cho_clus), "）相同。"))
    }
    color_mapping <- setNames(color, cho_clus)
    maskTable_filtered$color <- color_mapping[as.character(maskTable_filtered$cluster)]
  }
  
  p_umap <- ggplot(df, aes(x = umap_1, y = umap_2)) +
    geom_point(aes_string(color = celltype_fin), size = 0.05) +
    {if (!is.null(color)) {
      geom_path(data = maskTable_filtered, aes(group = group, color = I(color)), linewidth = linewidth, linetype = linetype)
    } else {
      geom_path(data = maskTable_filtered, aes(group = group), linewidth = linewidth, linetype = linetype)
    }} +
    coord_fixed() +
    theme_classic() +
    guides(color = guide_legend(title = celltype_fin, override.aes = list(size = 5)))
  
  print(p_umap)
  
  # 绘制柱状图部分
  group <- seurat_obj[[group.by]]
  celltype <- seurat_obj[[celltype_pre]]
  
  data <- data.frame(group, celltype)
  colnames(data) <- c("Group", "CellType")
  
  counts <- table(data$Group, data$CellType)
  
  proportions <- prop.table(counts, margin = 1) * 100
  
  proportions_long <- as.data.frame.table(proportions)
  colnames(proportions_long) <- c("Group", "CellType", "Frequency")
  
  p_bar <- ggplot(proportions_long, aes(x = Group, y = Frequency, fill = CellType)) +
    geom_col(position = "stack") +
    scale_y_continuous(labels = function(x) paste0(x, "%"), expand = expansion(mult = c(x_len, x_len))) +
    scale_x_discrete(expand = expansion(add = c(y_len,y_len))) +
    labs(title = plot_title, x = xlab, y = ylab, fill = legend_title) +
    theme_minimal() +
    theme(
      axis.text.x = element_text(angle = angle_x_text, hjust = 1, size = axis_text_size),
      axis.text.y = element_text(size = axis_text_size),
      axis.title.x = element_text(size = axis_title_size),
      axis.title.y = element_text(size = axis_title_size),
      axis.line.x = element_line(color = "black", size = axis_line_size),
      axis.line.y = element_line(color = "black", size = axis_line_size),
      plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm"),
      panel.border = element_blank(),
      axis.ticks = element_line(color = "black", size = axis_line_size)
    ) +
    coord_cartesian(clip = "off")
  
  if (!is.null(color)) {
    unique_celltypes <- unique(proportions_long$CellType)
    if (length(color) != length(unique_celltypes)) {
      warning("The length of the color vector does not match the number of unique cell types. Using default colors.")
    } else {
      names(color) <- unique_celltypes
      p_bar <- p_bar + scale_fill_manual(values = color)
    }
  }
  
  print(p_bar)
  
  return(list(umap_plot = p_umap, bar_plot = p_bar))
}


grad_heatmap <- function(seurat_obj, 
                                celltype_fin_col = "celltype_fin", 
                                celltype_big_col = "celltype_big", 
                                top_n = 5,
                         alpha = 0.5,
                                custom_color_vector = c("#191970", "#1E90FF", "white", "#FF6347", "#8B0000"),
                                custom_big_order = c("B and PC","T cells", "Stroma", "Epithelium", "Myeloid cells")) {
  
  # 检查输入的 custom_big_order 是否包含 seurat_obj 中的所有 celltype_big
  all_celltype_big <- unique(seurat_obj[[celltype_big_col]][[1]])
  if (!all(all_celltype_big %in% custom_big_order)) {
    warning(paste("输入的 custom_big_order 不包含所有的 celltype_big。所有 celltype_big 名称为:", 
                  paste(all_celltype_big, collapse = ", ")))
    return(NULL)
  }
  
  # 生成颜色梯度
  custom_colors <- colorRampPalette(custom_color_vector)(100)
  
  # 1. 获取差异表达基因
  markers <- FindAllMarkers(seurat_obj, assay = "RNA", group.by = celltype_fin_col)
  
  # 2. 筛选每个细胞类型的前 top_n 个 marker 基因
  top_markers <- markers %>% 
    group_by(cluster) %>% 
    top_n(n = top_n, wt = avg_log2FC)
  
  # 3. 准备细胞类型信息并排序
  celltype_info <- data.frame(
    celltype_fin = seurat_obj[[celltype_fin_col]][[1]],
    celltype_big = seurat_obj[[celltype_big_col]][[1]]
  ) %>% distinct()
  celltype_info$celltype_big <- factor(celltype_info$celltype_big, 
                                       levels = custom_big_order)
  celltype_info <- celltype_info %>%
    arrange(celltype_big, celltype_fin)
  
  # 4. 计算平均表达量（按排序后的细胞类型）
  avg_exp <- AverageExpression(seurat_obj, 
                               assays = "RNA",
                               group.by = celltype_fin_col,
                               features = unique(top_markers$gene))$RNA
  avg_exp <- avg_exp[, celltype_info$celltype_fin]  # 按排序后的细胞类型提取列
  
  # 5. 对数转换
  filtered_avg_exp <- log2(avg_exp + 1)
  
  # 为每个细胞类型找出其表达量最高的基因
  celltype_top_genes <- filtered_avg_exp %>%
    as.data.frame() %>%
    rownames_to_column("gene") %>%
    pivot_longer(-gene, names_to = "celltype_fin", values_to = "expression") %>%
    group_by(celltype_fin) %>%
    arrange(desc(expression)) %>%
    slice(1) %>%
    ungroup()
  
  # 为每个基因找出其表达量最高的细胞类型
  gene_top_cells <- filtered_avg_exp %>%
    as.data.frame() %>%
    rownames_to_column("gene") %>%
    pivot_longer(-gene, names_to = "celltype_fin", values_to = "expression") %>%
    group_by(gene) %>%
    arrange(desc(expression)) %>%
    slice(1) %>%
    ungroup()
  
  # 构建排序优先级
  custom_order <- list()
  for(big_type in custom_big_order){
    sub_cells <- celltype_info %>% 
      filter(celltype_big == big_type) %>% 
      pull(celltype_fin) %>% 
      as.character()
    
    candidate_genes <- celltype_top_genes %>% 
      filter(celltype_fin %in% sub_cells) %>% 
      arrange(desc(expression)) %>% 
      pull(gene)
    
    ordered_cells <- c()
    remaining_cells <- sub_cells
    
    for(g in candidate_genes){
      top_cell <- gene_top_cells %>% 
        filter(gene == g, celltype_fin %in% remaining_cells) %>% 
        pull(celltype_fin)
      
      if(length(top_cell) > 0){
        ordered_cells <- c(ordered_cells, top_cell)
        remaining_cells <- setdiff(remaining_cells, top_cell)
      }
    }
    
    custom_order[[big_type]] <- c(ordered_cells, remaining_cells)
  }
  
  # 应用自定义顺序
  final_cell_order <- unlist(custom_order)
  filtered_avg_exp <- filtered_avg_exp[, final_cell_order]
  
  # 基因排序（按最高表达细胞类型分组）
  gene_order <- filtered_avg_exp %>%
    as.data.frame() %>%
    rownames_to_column("gene") %>%
    pivot_longer(-gene, names_to = "celltype", values_to = "expression") %>%
    group_by(gene) %>%
    arrange(desc(expression)) %>%
    slice(1) %>%
    left_join(celltype_info, by = c("celltype" = "celltype_fin")) %>%
    arrange(factor(celltype_big, levels = custom_big_order), 
            match(celltype, final_cell_order)) %>%
    pull(gene)
  
  filtered_avg_exp <- filtered_avg_exp[gene_order, ]
  
  # 准备注释信息
  annotation_col <- data.frame(
    CellTypeBig = celltype_info$celltype_big,
    row.names = celltype_info$celltype_fin
  )
  
  # 绘制热图
  pheatmap(filtered_avg_exp,
           cluster_cols = FALSE,
           cluster_rows = FALSE,
           show_rownames = FALSE,
           show_colnames = FALSE,
           color = custom_colors,
           breaks = seq(quantile(filtered_avg_exp, 0.01), 
                        quantile(filtered_avg_exp, 0.99), 
                        length.out = 100),
           annotation_col = annotation_col,
           annotation_names_col = FALSE,  # 隐藏注释标题
           annotation_legend = FALSE,     # 隐藏图例
           border_color = "#7BB6DD",
           angle_col = 45,
           fontsize = 8,
           main = paste("Top", top_n, "Marker Genes"),
           # 自定义注释条样式
           annotation_colors = list(
             CellType = setNames(RColorBrewer::brewer.pal(length(custom_big_order), "Set2"), 
                                 custom_big_order)
           ),
           # 添加大类名称标签
           labels_col = ifelse(colnames(filtered_avg_exp) %in% 
                                 celltype_info$celltype_fin[match(custom_big_order, celltype_info$celltype_big)],
                               as.character(annotation_col$CellTypeBig), "")
  )
}



run_enrichment_analysis <- function(object, pvalueCutoff = 0.05, qvalueCutoff = 0.25) {
  # 获取输入参数名称
  object_name <- deparse(substitute(object))
  
  # 确保输入数据中包含gene列
  object$gene <- rownames(object)
  
  # 转换基因符号为ENTREZID
  ids <- bitr(object$gene, "SYMBOL", "ENTREZID", "org.Hs.eg.db")
  object <- merge(object, ids, by.x = "gene", by.y = "SYMBOL")
  
  # 按log2FC排序数据
  object <- object[order(object$avg_log2FC, decreasing = TRUE),]
  
  # 准备基因列表
  deg_list <- as.numeric(object$avg_log2FC)
  names(deg_list) <- object$ENTREZID
  
  # 筛选|log2FC|>1的基因
  selected_genes <- names(deg_list)[abs(deg_list) > 1]
  
  # KEGG富集分析
  kegg_results <- enrichKEGG(gene = selected_genes, organism = "hsa", pvalueCutoff = pvalueCutoff)
  
  # GO富集分析
  go_all <- enrichGO(selected_genes,
                     keyType = "ENTREZID",
                     OrgDb = org.Hs.eg.db,
                     ont = "ALL",
                     pAdjustMethod = "BH",
                     pvalueCutoff = pvalueCutoff,
                     qvalueCutoff = qvalueCutoff,
                     minGSSize = 10,
                     maxGSSize = 500,
                     readable = TRUE)
  
  # BP, CC, MF GO富集分析
  go_BP <- enrichGO(selected_genes,
                    keyType = "ENTREZID",
                    OrgDb = org.Hs.eg.db,
                    ont = "BP",
                    pAdjustMethod = "BH",
                    pvalueCutoff = pvalueCutoff,
                    qvalueCutoff = qvalueCutoff,
                    minGSSize = 10,
                    maxGSSize = 500,
                    readable = TRUE)
  
  go_CC <- enrichGO(selected_genes,
                    keyType = "ENTREZID",
                    OrgDb = org.Hs.eg.db,
                    ont = "CC",
                    pAdjustMethod = "BH",
                    pvalueCutoff = pvalueCutoff,
                    qvalueCutoff = qvalueCutoff,
                    minGSSize = 10,
                    maxGSSize = 500,
                    readable = TRUE)
  
  go_MF <- enrichGO(selected_genes,
                    keyType = "ENTREZID",
                    OrgDb = org.Hs.eg.db,
                    ont = "MF",
                    pAdjustMethod = "BH",
                    pvalueCutoff = pvalueCutoff,
                    qvalueCutoff = qvalueCutoff,
                    minGSSize = 10,
                    maxGSSize = 500,
                    readable = TRUE)
  
  # 组织GO结果
  go_BP_df <- as.data.frame(go_BP@result)
  go_BP_df$ONTOLOGY <- "BP"
  go_CC_df <- as.data.frame(go_CC@result)
  go_CC_df$ONTOLOGY <- "CC"
  go_MF_df <- as.data.frame(go_MF@result)
  go_MF_df$ONTOLOGY <- "MF"
  go_res <- rbind(go_BP_df, go_CC_df, go_MF_df)
  
  # 计算富集倍数
  calc_enrich_fold <- function(df) {
    apply(df, 1, function(x) {
      gene_parts <- as.numeric(strsplit(x["GeneRatio"], "/")[[1]])
      bg_parts <- as.numeric(strsplit(x["BgRatio"], "/")[[1]])
      GeneRatio <- gene_parts[1] / gene_parts[2]
      BgRatio <- bg_parts[1] / bg_parts[2]
      round(GeneRatio / BgRatio, 2)
    })
  }
  
  # KEGG结果计算富集倍数
  kegg_df <- as.data.frame(kegg_results@result)
  if (nrow(kegg_df) > 0) {
    kegg_df$EnrichmentFold <- calc_enrich_fold(kegg_df)
  }
  
  # GO结果计算富集倍数
  if (nrow(go_res) > 0) {
    go_res$EnrichmentFold <- calc_enrich_fold(go_res)
  }
  
  # 分割GO的GeneRatio列
  go_res <- separate(data = go_res,
                     col = GeneRatio,
                     into = c("GR1", "GR2"),
                     sep = "/")
  
  # 计算新的GeneRatio列
  go_res <- mutate(go_res,
                   GeneRatio = (as.numeric(GR1) / as.numeric(GR2)))
  
  # 根据ONTOLOGY分类
  result_BP <- go_res %>% filter(ONTOLOGY == 'BP')
  result_CC <- go_res %>% filter(ONTOLOGY == 'CC')
  result_MF <- go_res %>% filter(ONTOLOGY == 'MF')
  
  # 取前10个
  BP <- result_BP[1:10, ]
  CC <- result_CC[1:10, ]
  MF <- result_MF[1:10, ]
  
  # 合并并按GeneRatio降序排列
  all <- rbind(BP, CC, MF) %>% arrange(desc(GeneRatio))
  
  # 设置Description列的因子水平
  all$Description <- factor(all$Description, levels = rev(unique(all$Description)))
  
  # GO气泡图
  p1 <- ggplot(all, aes(x = GeneRatio, y = Description)) +
    geom_point(aes(size = Count, fill = pvalue), shape = 21) +
    facet_grid(ONTOLOGY ~., scale = 'free_y', space = 'free_y') +
    scale_fill_gradient(low = '#F25D5D', high = '#4A7DB6') +
    labs(title = paste(object_name, " - GO Enrichment"), y = NULL, x = 'GeneRatio') +  # 修改了title
    guides(fill = guide_colorbar(reverse = TRUE, order = 1)) +
    theme_dose(12) +
    scale_size(range = c(3, 8))
  
  # KEGG柱状图
  kegg_res <- kegg_df[1:10, ]
  kegg_res <- kegg_res[order(kegg_res$p.adjust), ]
  kegg_res$Description <- factor(kegg_res$Description, levels = rev(kegg_res$Description))
  
  p2 <- ggplot(data = kegg_res, aes(x = Description, y = -log10(p.adjust), fill = -log10(p.adjust))) +
    geom_bar(stat = "identity", width = 0.8) +
    scale_fill_gradient(low = "#F25D5D", high = '#4A7DB6') +
    scale_y_continuous(expand = c(0, 0), limits = c(0, max(range(-log10(kegg_res$p.adjust), na.rm = TRUE)) + 0.2)) +
    coord_flip() +
    scale_x_discrete(labels = function(dat) str_wrap(dat, width = 35)) +
    labs(x = NULL, y = bquote("-" ~ Log[10] ~ "(P value)"), title = paste(object_name, " - KEGG Pathway Enrichment")) +  # 修改了title
    theme_dose(12)
  
  # 返回结果
  return(list(p1 = p1, p2 = p2, kegg_df = kegg_df, go_res = go_res))
}
